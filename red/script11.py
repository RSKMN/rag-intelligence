import json
import time
import random
import os
from datetime import datetime, timezone
from jiniai import JiniAI

# Initialize Jina AI client (modify endpoint as needed)
client = JiniAI

# Initialize serial number counter
serial_no_counter = 0

def generate_next_event(previous_event=None):
    global serial_no_counter
    serial_no_counter += 1
    
    locations = ["home", "office", "park", "street", "restaurant"]
    
    if previous_event:
        last_location = previous_event["location"]
    else:
        last_location = random.choice(locations)
    
    location_transitions = {
        "home": ["street", "office"],
        "office": ["home", "restaurant"],
        "park": ["street", "home"],
        "street": ["park", "restaurant", "office"],
        "restaurant": ["home", "street"]
    }
    
    next_location = random.choice(location_transitions.get(last_location, locations))
    
    story = generate_story(previous_event, next_location)
    
    event = {
        "event_id": serial_no_counter,
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "location": next_location,
        "temperature": previous_event["temperature"] + random.uniform(-0.5, 0.5) if previous_event else round(random.uniform(20, 40), 2),
        "humidity": previous_event["humidity"] + random.uniform(-2, 2) if previous_event else round(random.uniform(30, 90), 2),
        "visual": story["visual"],
        "auditory": story["auditory"],
        "olfactory": story["olfactory"],
        "gustatory": story["gustatory"],
        "tactile": story["tactile"],
        "emotion": story["emotion"],
        "metadata": {
            "device_id": f"device_{random.randint(1, 100)}",
            "battery_level": max(0, previous_event["metadata"]["battery_level"] - random.uniform(0.5, 2.0)) if previous_event else round(random.uniform(10, 100), 2)
        }
    }
    
    return event, story["text"]

def generate_story(previous_event, current_location):
    if previous_event:
        prev_location = previous_event["location"]
        transition = f"From {prev_location}, you now find yourself in {current_location}."
    else:
        transition = f"You begin your journey at {current_location}."
    
    prompt = (
        f"You are an AI storyteller. Create an immersive short story based on a journey.\n\n"
        f"Previous Location: {previous_event['location'] if previous_event else 'N/A'}\n"
        f"Current Location: {current_location}\n"
        f"Environment Details: {previous_event['visual'] if previous_event else 'unknown'}\n"
        f"Sounds: {previous_event['auditory'] if previous_event else 'silent'}\n"
        f"Scents: {previous_event['olfactory'] if previous_event else 'neutral'}\n"
        f"Textures: {previous_event['tactile'] if previous_event else 'neutral'}\n"
        f"Mood: {previous_event['emotion'] if previous_event else 'neutral'}\n"
        f"Generate a vivid short story."
    )
    
    response = client.post("/generate", inputs=[{"text": prompt}])
    
    story_text = response[0].get("output", "A moment passes, but nothing eventful occurs.")
    
    return {
        "text": transition + " " + story_text,
        "visual": "generated by AI",
        "auditory": "generated by AI",
        "olfactory": "generated by AI",
        "gustatory": "generated by AI",
        "tactile": "generated by AI",
        "emotion": "generated by AI"
    }

def simulate_complex_data(file_path):
    previous_event = None
    
    while True:
        event, story = generate_next_event(previous_event)
        previous_event = event  
        
        with open(file_path, "a") as f:
            f.write(json.dumps(event) + "\n")
        
        print(f"Simulated event: {event}")
        print(f"Story: {story}")
        
        time.sleep(random.uniform(3, 5))

if __name__ == "__main__":
    simulate_complex_data("simulated_dataM.jsonl")
